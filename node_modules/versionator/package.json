{
  "author": {
    "name": "Paul Serby",
    "email": "paul@serby.net"
  },
  "name": "versionator",
  "description": "Static content versioning middleware for connect and express.",
  "version": "0.2.1",
  "repository": {
    "type": "git",
    "url": "git@github.com:serby/versionator.git"
  },
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "engines": {
    "node": ">0.8.0"
  },
  "dependencies": {
    "async": "~0.2",
    "lodash": "~1.0",
    "walker": "~1.0"
  },
  "devDependencies": {
    "coffee-script": "1.2.0",
    "express": "~2.5",
    "connect": ">= 1.0.0",
    "should": ">= 0.5.0",
    "mocha": ">= 0.9.0",
    "request": "> 2.1.0",
    "stylus": ">= 0.22.0",
    "jade": ">= 0.20.0",
    "mkdirp": "~0.3"
  },
  "readme": "# versionator - Static content versioning middleware for connect and express.\n\n[![build status](https://secure.travis-ci.org/serby/versionator.png)](http://travis-ci.org/serby/versionator)\n\nversionator was built to solve the problem of static assets getting stuck in browser and proxy caches when new versions of the assets are deployed.\n\nWithout versionator this is what can happen:\n\nYou set your static content to be cached and expire in 30 days time.\n\n     express.static(__dirname + '/public', { maxAge: 2592000000 })\n\nThis gives you more capacity on your web servers and a better rating on Google Pagespeed and ySlow.\n\nYou deploy your site and all is good.\n\nThen you need to make a change to sprite.png or app.js\n\nYou make your changes and redeploy. The trouble now is that everyone who has looked at your site already has the old version in their browser cache. Not only that, any upstream proxies will also have a copy.\n\nA possible solution is to rename your static assets every time you change them, but that is impractical as you also have to update all the references each time they change. If you have a single CSS sprite then this is a real pain.\n\nA better solution is to use versionator!\n\n## Installation\n\n      npm install versionator\n\n## Usage\n\n### Basic Middleware\n\nThe simplest way to use versionator is to use the basic middleware which looks for the given\nversion number in a url path and strips it out.\n\nAdd versionator into your middleware stack before the static middleware:\n\n```js\n\napp.version = '0.1.0';\nvar versionator = require('versionator').create(app.version);\n\napp.configure(function() {\n\n  app.use(versionator.middleware)\n  ....\n  .use(express.static(__dirname + '/public', { maxAge: 2592000000 }));\n\n});\n\n```\n\nPublic folder:\n\n\tpublic/js/app.js\n\nIn your HTML,CSS,JS add the version as an extra path.\n\ne.g.\n### HTML\n      <script src='/js/v0.1.0/app.js' />\n\nThere is also a URL versioning local variable that will convert paths for you.\nYou can expose as a helper like so:\n\n```js\n\napp.configure(function() {\n\n  // This exposes the local variable to the views\n  app.locals({\n    versionPath: versionator.versionPath\n  });\n\n});\n\n```\n\n### Jade\n\nThis can then be used in Jade like so\n\n      script(src=versionPath(/js/app.js))\n\n### Middleware\n\nversionator middleware will strip URL path names containing the version string. req.url is then modified for all other middleware.\n\ne.g.\n\n     req.url = '/js/v0.1.0/app.js'\n\nwill become:\n\n     req.url = '/js/app.js'\n\nNow all you need to do is increment app.version each deployment (We keep ours inline with our git tags using cake, the coffee-script build tool) then sit back and let your users enjoy the freshness.\n\nAn example of how to use versionator with connect and express can be found in the examples folder.\n\n### Mapped Middleware\n\nYou can also use versionator to add a hash, based on the content of the file, to the url path.\nThis way the url path will only change if the file has changed.\n\nTo do this you must first create a hash for all the files in the public folder.\nThis can be done as the application starts or read from a file that is created on deployment.\n\n```js\n\nversionator.createMapFromPath(__dirname + '/public', function(error, staticFileMap) {\n\n  var mappedVersion = versionator.createMapped(staticFileMap);\n\n  app.configure(function(){\n\n    // This exposes the local variable to the views\n    app.locals({\n      versionPath: mappedVersion.versionPath\n    });\n\n    app\n      .set('views', __dirname + '/views')\n      .set('view engine', 'jade')\n      .use(express.bodyParser())\n      .use(express.methodOverride())\n      .use(mappedVersion.middleware)\n      ....\n  });\n\n  ....\n});\n```\nIf you use the helper you can switch methods without any changes to your view code.\n\n### Live map updates\n\nYou can modify the map at runtime, say if during development you want to do a live reload of a resource. First, get the hash map for the modified files by passing a list of files as a `fileList` parameter. This should be full file paths and the files should be in the original public directory. The directory is passed in as well. Then pass the the new hash map to the middleware via `modifyMap`. Then push the new url to the client and update the resource tag to cause a reload.\n\n```js\n\n    var mappedVersion = versionator.createMapped(originalFileMap);\n    ...\n    // modify resource files. put full file path(s) in a list.\n\n    versionator.createMapFromPath(__dirname + '/public',  {'fileList': fileList}, function(error, modifiedFileMap) {\n        mappedVersion.modifyMap(modifiedFileMap);\n    )};\n\n    // send new hashed path to client\n    hashedpath = mappedVersion.versionPath(path)\n    ...\n```\n\n\n## Credits\n\n[Paul Serby](https://github.com/serby/) follow me on [twitter](http://twitter.com/PabloSerbo)\n\n[Rick Thomas](https://github.com/irickt)\n\n## Licence\nLicenced under the [New BSD License](http://opensource.org/licenses/bsd-license.php)\n",
  "readmeFilename": "README.md",
  "_id": "versionator@0.2.1",
  "dist": {
    "shasum": "d586901801bb166b19504495254da381823118d3"
  },
  "_from": "versionator@*"
}
